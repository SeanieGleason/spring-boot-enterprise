plugins {
	id "java-gradle-plugin"
	id "io.spring.javaformat" version "${javaFormatVersion}"
	id "checkstyle"
	id "java"
	id "groovy"
}

repositories {
	mavenCentral()
	gradlePluginPortal()
	maven { url "https://repo.spring.io/release" }
	maven { url "https://repo.spring.io/milestone" }
	if (version.endsWith("SNAPSHOT")) {
		maven { url "https://repo.spring.io/snapshot" }
	}
}
sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

sourceSets {
	main {
		java { srcDirs = [] }
		groovy { srcDirs += ["src/main/java"] }
	}
}

configurations {
	implementation {
		exclude module: "groovy-all"
	}
}

dependencies {
	implementation localGroovy()
	checkstyle "io.spring.javaformat:spring-javaformat-checkstyle:${javaFormatVersion}"
	implementation "commons-codec:commons-codec"
	implementation "com.fasterxml.jackson.core:jackson-databind"
	implementation "io.github.gradle-nexus:publish-plugin:1.1.0"
	implementation("io.spring.javaformat:spring-javaformat-gradle-plugin:${javaFormatVersion}")
	implementation "io.spring.nohttp:nohttp-gradle:0.0.10"
	implementation "org.apache.maven:maven-embedder:3.6.2"
	implementation "org.asciidoctor:asciidoctor-gradle-jvm:3.3.2"
	implementation "org.codehaus.groovy:groovy-all:2.5.17"
	implementation "org.jfrog.buildinfo:build-info-extractor-gradle:4.29.0"

	implementation "org.gradle:test-retry-gradle-plugin:${testRetryVersion}"
	implementation "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.7.1"
	implementation(platform("org.springframework.boot:spring-boot-dependencies:${springBootVersion}"))
	implementation "org.springframework:spring-core"
	implementation "org.springframework:spring-web"
	implementation("io.spring.javaformat:spring-javaformat-gradle-plugin:${javaFormatVersion}")

	testImplementation "org.assertj:assertj-core"
	testImplementation "org.apache.logging.log4j:log4j-core"
	testImplementation "org.junit.jupiter:junit-jupiter"
	testRuntimeOnly "org.junit.platform:junit-platform-launcher"
}

tasks.named("test", Test).configure {
	onlyIf { !project.hasProperty("buildSrc.skipTests") }
	useJUnitPlatform()
	jvmArgs(
			"--add-opens", "java.base/java.lang=ALL-UNNAMED",
			"--add-opens", "java.base/java.util=ALL-UNNAMED"
	)
}

gradlePlugin {
	plugins {
		EnterpriseConventionsPlugin {
			id = "com.enterprise.conventions"
			implementationClass = "com.enterprise.build.ConventionsPlugin"
		}
		configurationPropertiesPlugin {
			id = "com.enterprise.configuration-properties"
			implementationClass = "com.enterprise.build.properties.ConfigurationPropertiesPlugin"
		}
		bomPlugin {
			id = "com.enterprise.bom"
			implementationClass = "com.enterprise.build.bom.BomPlugin"
		}
	}
}
